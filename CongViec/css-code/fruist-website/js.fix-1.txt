    //  SHOW MENU

const   navMenu = document.getElementById('nav-menu'),
        navToggle = document.getElementById('nav-toggle'),
        navClose = document.getElementById('nav-close')

        // MENU SHOW
        //  validate if constant exists   // xác thực nếu hằng số không tồn tại
    if(navToggle) {
        navToggle.addEventListener('click', () =>{
            navMenu.classList.add('show-menu')
        })
    }

    // MENU HIDDEN
        //  validate if constant exists //  // xác thực nếu hằng số tồn tại
    if(navClose) {
        navClose.addEventListener('click', () =>{
            navMenu.classList.remove('show-menu')
        })
    }

    // REMOVE MENU MOBILE
    const navLink = document.querySelectorAll('.nav__link')

    const linkAction = () => {
        const navMenu = document.getElementById('nav-menu')
            // when we click on each nav__link , we remove the show menu class 
            // khi tôi click vào từng nav__link , thì sẽ loại bỏ lớp menu hiển thị
        navMenu.classList.remove('show-menu')
    }
    navLink.forEach(n => n.addEventListener('click', linkAction))

    // SHADOW HEADER
    const shadowHeader = () =>{
        const header = document.getElementById('header')
        // when the scroll is greater than 50 viewport height, add the shadow-header class to the header tag    
          
          this.scrollY >= 50  ? header.classList.add('shadow-header')
                            :  header.classList.remove('shadow-header')
    }
    window.addEventListener('scroll', shadowHeader)

    // SHOW SRCOLL UP
  const scrollUp = () => {
    const scrollUp = document.getElementById('scroll-up')
        // when the scroll is higher than 350 viewport height, add the show-scroll class to the a tag with the scroll up class    
        // khi cuộn cao hơn 350 chiều cao khung nhìn, hãy thêm lớp show-scroll vào thẻ a với lớp cuộn lên
        this.scrollY >= 350 ? scrollUp.classList. add('show-scroll')
                    : scrollUp.classList.remove('show-scroll')
}
window.addEventListener('scroll', scrollUp)
 
    // SRCOLL SECTIONS ACTIVE LINK 
    const section = document.querySelectorAll('section[id]')

    const scrollActive = () => {
        const scrollDown = window.scrollY

        section.forEach(current =>{
            const   sectionHeight = current.offsetHeight,
                    sectionTop = current.offsetTop - 58,
                    sectionID = current.getAttribute('id'),
                    sectionClass = document.querySelector('.nav__menu a[href*=' + sectionID +']')

            if(scrollDown > sectionTop && scrollDown <= sectionTop + sectionHeight) {
                sectionClass. classList.add('active-link')
            } else {
                sectionClass. classList.remove('active-link')
            }
        })
    }
    window.addEventListener('scroll' ,scrollActive)

// DARK LINK THEME
    
    const themeButton = document.getElementById('theme-button')
    const darkTheme = 'dark-theme'
    const iconTheme = 'ri-sun-line'

        //Previously selected topic(if user selected)
        // Chủ đề đã chọn trước đó (nếu người dùng đã chọn)
    const selectedTheme = localStorage.getItem('selected-theme')
    const selectedIcon = localStorage.getItem('selected-icon')

        // I obtain the current theme that the interface has by vailidating the dark class
        // Tôi có được chủ đề hiện tại của giao diện bằng cách xác thực lớp tối
    
    const getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark' : 'light'
    const getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? 'ri-moon-line' : 'ri-sun-line'

        // I validate if the user previously chose a topic
        // Tôi xác thực xem người dùng trước đó đã chọn một chủ đề hay chưa
    if (selectedTheme) {
        // If the validation is fulfilled, I will ask what the issue was to know if we activated or deactivated the dark
        // Nếu quá trình xác thực được thực hiện, tôi sẽ hỏi vấn đề là gì để biết liệu chúng tôi đã kích hoạt hay hủy kích hoạt bóng tối    
        document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme)
        themeButton.classList[selectedIcon ==='ri-moon-line' ? 'add' : 'remove'](iconTheme)
    }

        // Active / deactive the theme manully with the buuton
        // Kích hoạt / không kích hoạt chủ đề theo cách thủ công bằng nút
    themeButton.addEventListener('click', () =>{

        // Add or remove the dark / icon theme 
        // Thêm hoặc xóa chủ đề ( tối / biểu tượng)
        document.body.classList.toggle(darkTheme)
        themeButton.classList.toggle(iconTheme)

        // I will save the theme and the current icon that the user chose
        // Tôi sẽ lưu theme và icon hiện tại mà người dùng chọn
        localStorage.setItem('selected-theme', getCurrentTheme())
        localStorage.setItem('selected-icon', getCurrentIcon())
    })

// SCORLL REVEAL ANIMATION  